(define (merge-sort l less-than?)
  (letrec ((inner-split
            (lambda (l a b)
              (if (pair? l)
                  (inner-split (cdr l) b (cons (car l) a))
                  (cons a b))
              ))
           (inner-merge
            (lambda (a b current)
              (if (eq? a '())
                  (if (eq? b '())
                      (reverse current)
                      (inner-merge b a current))
                  (if (or (eq? b '()) (less-than? (car a) (car b)))
                      (inner-merge (cdr a) b (cons (car a) current))
                      (inner-merge a (cdr b) (cons (car b) current))))))
           (sort
            (lambda (l)
              (if (and (pair? l) (pair? (cdr l)))
                  (let ((s (inner-split l '() '())))
                    (inner-merge (sort (car s)) (sort (cdr s)) '())
                    )
                  l)))
           )
    (sort l)
    ))
