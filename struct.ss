(define (generate-structure-definition prototype)
  (letrec ((name (car prototype))
           (member-list (cdr prototype))
           (scan-loop
            (lambda (member-list info-list-rev count)
              (if (pair? member-list)
                  (scan-loop (cdr member-list)
                             (cons (cons count (car member-list))
                                   info-list-rev)
                             (+ count 1))
                  (reverse info-list-rev))))
           (member-info (scan-loop member-list '() 1))
           (output-member-loop
            (lambda (info-list)
              (and (pair? info-list)
                   (let ((index-string (string-append (symbol->string name) ":@" (symbol->string (cdr (car info-list))))))
                     (write (list 'define (string->symbol index-string) (car (car info-list))))
                     (newline)
                     (write (list 'define
                                  (list (string->symbol (string-append (symbol->string name) ":" (symbol->string (cdr (car info-list))))) 'self)
                                  (list 'vector-ref 'self (car (car info-list))))
                            )
                     (newline)
                     (write (list 'define
                                  (list (string->symbol (string-append (symbol->string name) ":" (symbol->string (cdr (car info-list))) "-set!")) 'self 'value)
                                  (list 'vector-set! 'self (car (car info-list)) 'value))
                            )
                     (newline)
                     (output-member-loop (cdr info-list))
                     )
                  )))
           )
    (output-member-loop member-info)
    (write (list 'define (cons (string->symbol (string-append (symbol->string name) ":@")) member-list)
                 (cons 'vector (cons (list 'quote name) member-list))))
    (newline)
    (write (list 'define (list (string->symbol (string-append (symbol->string name) ":?")) 'self)
                 (list 'and
                       (list 'vector? 'self)
                       (list '= (list 'vector-length 'self) (+ (length member-list) 1))
                       (list 'eq? (list 'vector-ref 'self 0) (list 'quote name)))))
    (newline)
    ))

(define (generate-loop)
  (let ((input (read)))
    (and (pair? input)
         (begin
           (generate-structure-definition input)
           (generate-loop)))))
(generate-loop)
